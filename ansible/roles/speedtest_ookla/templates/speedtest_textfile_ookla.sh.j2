#!/usr/bin/env bash
set -euo pipefail

# === Настройки ===
TEXTDIR="{{ node_speedtest_textdir }}"
TMP="$(mktemp "${TEXTDIR}/.speedtest.prom.XXXXXX")"
trap 'rm -f "$TMP"' EXIT

# Имя узла ДОЛЖНО совпадать с labels.name в job=node (для фильтрации в Grafana)
NODE_NAME="${NODE_NAME:-{{ node_speedtest_node_name }}}"

# Можно указать конкретный сервер Speedtest (ID). Узнать: speedtest -L
SPEEDTEST_SERVER_ID="${SPEEDTEST_SERVER_ID:-{{ node_speedtest_server_id }}}"
SPEEDTEST_BIN="${SPEEDTEST_BIN:-{{ node_speedtest_bin }}}"

# Пропускать тест, если uplink сейчас занят
SKIP_BUSY="${SKIP_BUSY:-{{ node_speedtest_skip_busy | ternary('true','false') }}}"
BUSY_THRESH="${BUSY_THRESH:-{{ node_speedtest_busy_thresh }}}"
PROM_URL="${PROM_URL:-{{ node_speedtest_prom_url }}}"
PROM_USER="${PROM_USER:-{{ node_speedtest_prom_user }}}"
PROM_PASS="${PROM_PASS:-{{ node_speedtest_prom_pass }}}"
IS_BUSY_DEBUG=${IS_BUSY_DEBUG:-{{ node_speedtest_is_busy_debug }}}

is_busy() {
  local q='max_over_time(node:uplink_utilization:ratio{name="'"$NODE_NAME"'"}[1m])'
  local curl_args=(-sG "$PROM_URL/api/v1/query" --data-urlencode "query=$q")
  if [[ -n "${PROM_USER:-}" ]]; then
    curl_args=(-s -u "$PROM_USER:$PROM_PASS" -G "$PROM_URL/api/v1/query" --data-urlencode "query=$q")
  fi

  if [[ "${IS_BUSY_DEBUG:-0}" = "1" ]]; then
    local auth_mask=""; [[ -n "${PROM_USER:-}" ]] && auth_mask=" -u ${PROM_USER}:********"
    echo "[is_busy] PROM_URL=${PROM_URL} ${auth_mask}"
    echo "[is_busy] QUERY=${q}"
  fi

  local resp v
  resp="$(curl "${curl_args[@]}")"
  v="$(printf '%s' "$resp" | jq -r '.data.result[0].value[1] // empty' 2>/dev/null || true)"

  if [[ "${IS_BUSY_DEBUG:-0}" = "1" ]]; then
    if command -v jq >/dev/null 2>&1; then
      echo "[is_busy] RAW_RESPONSE:"; printf '%s\n' "$resp" | jq .
    else
      echo "[is_busy] RAW_RESPONSE: $resp"
    fi
    echo "[is_busy] parsed_value=${v:-<empty>}  threshold=${BUSY_THRESH:-0.50}"
  fi

  awk -v th="${BUSY_THRESH:-0.50}" -v x="${v:-0}" 'BEGIN{exit !(x>th)}'
}

# === Проверки ===
if [[ ! -x "$SPEEDTEST_BIN" ]]; then
  echo "# ookla speedtest CLI not found at $SPEEDTEST_BIN" >>"$TMP"
  install -o root -g root -m 0644 "$TMP" "${TEXTDIR}/speedtest_ookla.prom"
  exit 0
fi

if [[ "$SKIP_BUSY" == "true" ]] && is_busy; then
  {
    echo "# skipped due to high uplink utilization"
    printf 'vpn_speed_last_run_timestamp_seconds{name="%s",method="ookla"} %s\n' "$NODE_NAME" "$(date +%s)"
    printf 'vpn_speed_success{name="%s",method="ookla"} 0\n' "$NODE_NAME"
  } >>"$TMP"
  install -o root -g root -m 0644 "$TMP" "${TEXTDIR}/speedtest_ookla.prom"
  exit 0
fi

LANG=C LC_ALL=C
prom_escape() { sed -e 's/\\/\\\\/g' -e 's/"/\\"/g'; }

ARGS=( --accept-license --accept-gdpr --format=json --progress=no )
[[ -n "${SPEEDTEST_SERVER_ID:-}" ]] && ARGS+=( --server-id "$SPEEDTEST_SERVER_ID" ) || [[ -n "${SPEEDTEST_SERVER_ID:-}" ]] && ARGS+=( -s "$SPEEDTEST_SERVER_ID" )

OUT="$("$SPEEDTEST_BIN" "${ARGS[@]}" 2>&1)"
RC=$?

if [[ $RC -ne 0 ]]; then
  NOW="$(date +%s)"
  {
    echo "# speedtest exited with code $RC"
    printf 'vpn_speed_last_run_timestamp_seconds{name="%s",method="ookla"} %s\n' "$NODE_NAME" "$NOW"
    printf 'vpn_speed_success{name="%s",method="ookla"} 0\n' "$NODE_NAME"
  } >>"$TMP"
  install -o root -g root -m 0644 "$TMP" "${TEXTDIR}/speedtest_ookla.prom"
  exit 0
fi

dl_Bps="$(jq -r '(.download.bandwidth // .download.bytesPerSecond // .download.bitsPerSecond? / 8) // empty | select(.!=null)' <<<"$OUT")"
ul_Bps="$(jq -r '(.upload.bandwidth   // .upload.bytesPerSecond   // .upload.bitsPerSecond?   / 8) // empty | select(.!=null)' <<<"$OUT")"

ping_ms="$(jq -r '.ping.latency // empty | select(.!=null)' <<<"$OUT")"
jitter_ms="$(jq -r '.ping.jitter  // empty | select(.!=null)' <<<"$OUT")"
loss_pct="$(jq -r '.packetLoss    // empty | select(.!=null)' <<<"$OUT")"

srv_name="$(jq -r '.server.name     // empty | select(.!=null)' <<<"$OUT" | prom_escape)"
srv_loc="$(jq -r '.server.location  // empty | select(.!=null)' <<<"$OUT" | prom_escape)"
srv_id="$(jq -r  '.server.id        // empty | select(.!=null)' <<<"$OUT")"
res_url="$(jq -r '.result.url       // empty | select(.!=null)' <<<"$OUT")"

to_bps_from_Bps() { awk '{printf("%.0f",$1*8)}'; }
to_sec_from_ms()  { awk '{printf("%.6f",$1/1000)}'; }
to_ratio_from_pct(){ awk '{printf("%.6f",$1/100)}'; }

NOW="$(date +%s)"
{
  printf 'vpn_speed_last_run_timestamp_seconds{name="%s",method="ookla"} %s\n' "$NODE_NAME" "$NOW"

  if [[ -n "$ping_ms" ]]; then
    printf 'vpn_speed_ping_seconds{name="%s",method="ookla",server="%s",server_location="%s",server_id="%s"} %s\n' \
      "$NODE_NAME" "$srv_name" "$srv_loc" "$srv_id" "$(to_sec_from_ms <<<"$ping_ms")"
  fi

  if [[ -n "$jitter_ms" ]]; then
    printf 'vpn_speed_jitter_seconds{name="%s",method="ookla",server="%s",server_location="%s",server_id="%s"} %s\n' \
      "$NODE_NAME" "$srv_name" "$srv_loc" "$srv_id" "$(to_sec_from_ms <<<"$jitter_ms")"
  fi

  if [[ -n "$loss_pct" ]]; then
    printf 'vpn_speed_packet_loss_ratio{name="%s",method="ookla",server="%s",server_location="%s",server_id="%s"} %s\n' \
      "$NODE_NAME" "$srv_name" "$srv_loc" "$srv_id" "$(to_ratio_from_pct <<<"$loss_pct")"
  fi

  if [[ -n "$dl_Bps" ]]; then
    printf 'vpn_speed_download_bps{name="%s",method="ookla",server="%s",server_location="%s",server_id="%s"} %s\n' \
      "$NODE_NAME" "$srv_name" "$srv_loc" "$srv_id" "$(to_bps_from_Bps <<<"$dl_Bps")"
  fi

  if [[ -n "$ul_Bps" ]]; then
    printf 'vpn_speed_upload_bps{name="%s",method="ookla",server="%s",server_location="%s",server_id="%s"} %s\n' \
      "$NODE_NAME" "$srv_name" "$srv_loc" "$srv_id" "$(to_bps_from_Bps <<<"$ul_Bps")"
  fi

  if [[ -n "$res_url" ]]; then
    printf 'vpn_speed_result_url_info{name="%s",method="ookla",server="%s",server_location="%s",server_id="%s",url="%s"} 1\n' \
      "$NODE_NAME" "$srv_name" "$srv_loc" "$srv_id" "$(printf '%s' "$res_url" | prom_escape)"
  fi

  if [[ -n "$dl_Bps" || -n "$ul_Bps" ]]; then
    printf 'vpn_speed_success{name="%s",method="ookla",server="%s"} 1\n' "$NODE_NAME" "$srv_name"
  else
    printf 'vpn_speed_success{name="%s",method="ookla"} 0\n' "$NODE_NAME"
  fi
} >>"$TMP"

install -o root -g root -m 0644 "$TMP" "${TEXTDIR}/speedtest_ookla.prom"
