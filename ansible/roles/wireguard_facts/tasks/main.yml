---
# === WireGuard facts

- name: WG facts | Init catalog
  ansible.builtin.set_fact:
    wg_nodes_catalog: []
  tags: [wireguard, wg_facts]

# VPN
- name: WG facts | Add VPN hosts
  ansible.builtin.set_fact:
    wg_nodes_catalog: >-
      {{ wg_nodes_catalog + [ {
           'inventory_hostname': item,
           'wg_ip': (hostvars[item].wg_ip | default(hostvars[item].ansible_host)),
           'role': 'vpn'
         } ] }}
  loop: "{{ groups['vpn'] | default([]) }}"
  when: hostvars[item] is defined
  tags: [wireguard, wg_facts]

# RU probes
- name: WG facts | Add RU probe hosts
  ansible.builtin.set_fact:
    wg_nodes_catalog: >-
      {{ wg_nodes_catalog + [ {
           'inventory_hostname': item,
           'wg_ip': (hostvars[item].wg_ip | default(hostvars[item].ansible_host)),
           'role': 'probe'
         } ] }}
  loop: "{{ groups['ru_zondes'] | default([]) }}"
  when: hostvars[item] is defined
  tags: [wireguard, wg_facts]

# Backup clients
- name: WG facts | Add backup client hosts
  ansible.builtin.set_fact:
    wg_nodes_catalog: >-
      {{ wg_nodes_catalog + [ {
           'inventory_hostname': item,
           'wg_ip': (hostvars[item].wg_ip | default(hostvars[item].ansible_host)),
           'role': 'backup'
         } ] }}
  loop: "{{ groups['backup_clients'] | default([]) }}"
  when: hostvars[item] is defined
  tags: [wireguard, wg_facts]

# Дедупликация по inventory_hostname (если хост в нескольких группах)
- name: WG facts | Deduplicate catalog by inventory_hostname
  ansible.builtin.set_fact:
    wg_nodes_catalog: >-
      {{ dict( (wg_nodes_catalog | map(attribute='inventory_hostname') | list)
               | zip(wg_nodes_catalog) )
         | dict2items
         | map(attribute='value')
         | list }}
  tags: [wireguard, wg_facts]

# Текущий хост
- name: WG facts | Lookup current host entry
  ansible.builtin.set_fact:
    wireguard_node_entry: >-
      {{
        wg_nodes_catalog
        | selectattr('inventory_hostname','equalto', inventory_hostname)
        | list | first | default(None)
      }}
  tags: [wireguard, wg_facts]

# Вывести wg_ip, если не задан (fallback: ansible_host)
- name: WG facts | Derive wg_ip if missing
  ansible.builtin.set_fact:
    wg_ip: "{{ (wireguard_node_entry.wg_ip | default(ansible_host)) | string }}"
  when: wg_ip is not defined
  tags: [wireguard, wg_facts]

# Подсеть /24
- name: WG facts | Compute /24 subnet
  ansible.builtin.set_fact:
    wg_subnet_cidr: "{{ (wg_ip | regex_replace('\\.\\d+$', '.0')) }}/24"
  when: wg_ip is defined and (wg_ip | length > 0)
  tags: [wireguard, wg_facts]

# Хаб
- name: WG facts | Remember hub inventory host (if any)
  ansible.builtin.set_fact:
    wireguard_hub_inventory_host: "{{ groups['hub'][0] }}"
  when:
    - wireguard_hub_inventory_host is not defined
    - groups['hub'] is defined
    - groups['hub'] | length > 0
  tags: [wireguard, wg_facts]

- name: WG facts | Effective hub wg_ip
  ansible.builtin.set_fact:
    hub_wg_ip_effective: >-
      {{
        hub_wg_ip
        | default(
            hostvars.get(wireguard_hub_inventory_host | default(''), {})
                     .get('hub_wg_ip',
                          hostvars.get(wireguard_hub_inventory_host | default(''), {})
                                  .get('wg_ip', '')
                     )
          )
      }}
  when: hub_wg_ip_effective is not defined
  tags: [wireguard, wg_facts]

- name: WG facts | Hub /32 helper
  ansible.builtin.set_fact:
    hub_wg_ip_cidr32: "{{ hub_wg_ip_effective }}/32"
  when: hub_wg_ip_effective | default('') | length > 0
  tags: [wireguard, wg_facts]

- name: WG facts | Done
  ansible.builtin.set_fact:
    wireguard_facts_loaded: true
  tags: [wireguard, wg_facts]
