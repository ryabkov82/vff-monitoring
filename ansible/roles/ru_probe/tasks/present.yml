---
- name: RU probe | Install deps
  ansible.builtin.apt:
    name: [iperf3, jq, curl]
    state: present
    update_cache: true
  tags: [ru_probe]

- name: RU probe | Seed host list (vpn only)
  ansible.builtin.set_fact:
    _target_hosts: "{{ groups['vpn'] | default([]) | list }}"
  tags: [ru_probe]

# === Сбор публичных IP узлов через ssh -G + getent =============================

# Инициализируем список
- name: RU probe | Init SSH query list
  ansible.builtin.set_fact:
    _ssh_query: []
  tags: [ru_probe]

# Наполняем: alias = hostvars[item].ssh_alias или inventory_hostname
- name: RU probe | Build SSH query list (alias per host)
  ansible.builtin.set_fact:
    _ssh_query: "{{ _ssh_query + [ {'host': item, 'alias': (hostvars[item].ssh_alias | default(item)) } ] }}"
  loop: "{{ _target_hosts }}"
  vars:
    _ssh_query: "{{ _ssh_query | default([]) }}"
  tags: [ru_probe]

- name: RU probe | Read HostName from local ssh config (ssh -G)
  ansible.builtin.shell: |
    set -o pipefail
    ssh -G {{ item.alias }} 2>/dev/null | awk 'tolower($1)=="hostname"{print $2; exit}'
  args: { executable: /bin/bash }
  loop: "{{ _ssh_query }}"
  register: _sshg_nodes
  delegate_to: localhost
  run_once: true
  changed_when: false
  failed_when: false
  tags: [ru_probe]

# На каждый узел: если stdout — IP, берём его; иначе резолвим FQDN -> IPv4
- name: RU probe | Resolve per-node host to IPv4
  ansible.builtin.shell: |
    set -o pipefail
    host="{{ item.stdout | trim }}"
    if echo "$host" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$'; then
      echo "$host"
    elif [ -n "$host" ]; then
      getent ahostsv4 "$host" | awk '{print $1; exit}'
    else
      echo ""
    fi
  args: { executable: /bin/bash }
  loop: "{{ _sshg_nodes.results | default([]) }}"
  register: _pernode_ip
  delegate_to: localhost
  run_once: true
  changed_when: false
  failed_when: false
  tags: [ru_probe]

# Собираем map: inventory_hostname -> IPv4 (пустая строка допустима — шаблон подставит фолбэк)
- name: RU probe | Build map host -> public IPv4 (from ssh-config/getent)
  ansible.builtin.set_fact:
    _name_to_ip: >-
      {{
        dict(
          (_ssh_query | default([])) | map(attribute='host') | list
          |
          zip(
            (_pernode_ip.results | default([])) | map(attribute='stdout') | list
          )
        )
      }}
  delegate_to: localhost
  run_once: true
  changed_when: false
  tags: [ru_probe]

# === Деплой скриптов и юнитов =================================================

- name: RU probe | Install script
  ansible.builtin.template:
    src: ru_iperf_probe.sh.j2
    dest: /usr/local/bin/ru_iperf_probe.sh
    mode: "0755"
    owner: root
    group: "{{ ru_probe_group }}"
  tags: [ru_probe]

- name: RU probe | Drop env file (optional overrides)
  ansible.builtin.template:
    src: ru-iperf-probe.env.j2
    dest: /etc/default/ru-iperf-probe
    mode: "0644"
    owner: root
    group: "{{ ru_probe_group }}"
  tags: [ru_probe]

- name: RU probe | Systemd units
  ansible.builtin.template:
    src: ru-iperf-probe.service.j2
    dest: /etc/systemd/system/ru-iperf-probe.service
    mode: "0644"
  tags: [ru_probe]

- name: RU probe | Systemd timer
  ansible.builtin.template:
    src: ru-iperf-probe.timer.j2
    dest: /etc/systemd/system/ru-iperf-probe.timer
    mode: "0644"
  tags: [ru_probe]

- name: RU probe | Reload systemd
  ansible.builtin.systemd:
    daemon_reload: true
  tags: [ru_probe]

- name: RU probe | Enable & start timer
  ansible.builtin.systemd:
    name: ru-iperf-probe.timer
    enabled: true
    state: started
  tags: [ru_probe]
