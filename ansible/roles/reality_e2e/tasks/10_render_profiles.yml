---
# === REALITY E2E: рендер профилей sing-box по inventory (без vpn_nodes) =======

- name: Reality E2E | Assert shared secrets are provided (uuid/public_key/short_id)
  ansible.builtin.assert:
    that:
      - reality_e2e_shared is defined
      - reality_e2e_shared.uuid | default('') | length > 0
      - reality_e2e_shared.public_key | default('') | length > 0
      - reality_e2e_shared.short_id | default('') | length > 0
    fail_msg: >
      reality_e2e_shared.{uuid, public_key, short_id} must be defined
      (рекомендуется хранить в group_vars/hub/vault.yml).
  tags: [reality_e2e]

- name: Reality E2E | Compute cfg dir from monitoring_root (if not set)
  ansible.builtin.set_fact:
    reality_e2e_cfg_dir: "{{ reality_e2e_cfg_dir | default(monitoring_root ~ '/ru-probe/reality') }}"
  tags: [reality_e2e]

- name: Reality E2E | Ensure cfg dir exists
  ansible.builtin.file:
    path: "{{ reality_e2e_cfg_dir }}"
    state: directory
    owner: root
    group: "{{ reality_e2e_group }}"
    mode: "0755"
  tags: [reality_e2e]

# ---- Автодетект server из ~/.ssh/config -------------------------------------

- name: Reality E2E | Parse ~/.ssh/config on controller (Host -> HostName)
  ansible.builtin.shell: |
    set -euo pipefail
    awk '
      tolower($1)=="host"     { host=$2; next }
      tolower($1)=="hostname" { if (host!="") {print host" "$2; host=""} }
    ' ~/.ssh/config | awk '{printf "%s=%s\n",$1,$2}'
  args:
    executable: /bin/bash
  delegate_to: localhost
  run_once: true
  register: sshcfg
  changed_when: false
  failed_when: false
  tags: [reality_e2e]

- name: Reality E2E | Build ssh_hostmap dict
  ansible.builtin.set_fact:
    reality_e2e_ssh_hostmap: >-
      {{
        dict(
          (sshcfg.stdout_lines | default([]))
          | map('split', '=', 1)
          | map('list')
        )
      }}
  run_once: true
  tags: [reality_e2e]

# ---- Выбор узлов и вычисление server_effective -------------------------------

# Берём только узлы из группы [vpn], где reality.e2e_enabled: true
- name: Reality E2E | Init host list
  ansible.builtin.set_fact:
    reality_e2e_hosts: []
  tags: [reality_e2e]

- name: Reality E2E | Collect hosts with e2e enabled (from [vpn])
  ansible.builtin.set_fact:
    reality_e2e_hosts: "{{ reality_e2e_hosts + [item] }}"
  loop: "{{ groups['vpn'] | default([]) }}"
  when:
    - hostvars[item] is defined
    - (hostvars[item].reality.e2e_enabled | default(false)) | bool
  tags: [reality_e2e]

# Готовим записи с вычисленным server_effective
- name: Reality E2E | Init effective nodes list
  ansible.builtin.set_fact:
    reality_e2e_nodes_eff: []
  tags: [reality_e2e]

- name: Reality E2E | Compute effective server per node
  ansible.builtin.set_fact:
    reality_e2e_nodes_eff: >-
      {{
        reality_e2e_nodes_eff + [ {
          'host': item,
          'name': (hostvars[item].node_name | default(item)),
          'reality': {
            'server_effective': (
              hostvars[item].reality.server
              | default(
                  reality_e2e_ssh_hostmap[
                    (hostvars[item].ssh_alias | default(item))
                  ]
                  | default(hostvars[item].ansible_host | default(''))
                )
            ),
            'sni': (hostvars[item].reality.sni | default(reality_e2e_shared.sni | default(''))),
            'socks_port': (hostvars[item].reality.socks_port | default(reality_e2e_defaults.socks_port | default(1081))),
            'flow': (hostvars[item].reality.flow | default(reality_e2e_defaults.flow | default(''))),
            'log_level': (hostvars[item].reality.log_level | default(reality_e2e_defaults.log_level | default('warn')))
          }
        } ] }}
  loop: "{{ reality_e2e_hosts }}"
  loop_control:
    label: "{{ item }}"
  tags: [reality_e2e]

- name: Reality E2E | Assert server can be resolved
  ansible.builtin.assert:
    that:
      - item.reality.server_effective | default('') | length > 0
    fail_msg: >-
      Node {{ item.name }}: cannot resolve REALITY server.
      Установи host_vars/{{ item.host }}.reality.server
      ИЛИ добавь Host/HostName в ~/.ssh/config (с алиасом {{ hostvars[item.host].ssh_alias | default(item.host) }})
      ИЛИ задай ansible_host.
  loop: "{{ reality_e2e_nodes_eff }}"
  loop_control:
    label: "{{ item.name }}"
  tags: [reality_e2e]

# ---- Рендер профилей ---------------------------------------------------------

- name: Reality E2E | Render JSON profiles (sing-box config)
  ansible.builtin.template:
    src: "reality_profile.json.j2"
    dest: "{{ reality_e2e_cfg_dir }}/{{ item.name }}.json"
    owner: root
    group: "{{ reality_e2e_group }}"
    mode: "0644"
  loop: "{{ reality_e2e_nodes_eff }}"
  loop_control:
    label: "{{ item.name }}"
  vars:
    eff_server: "{{ item.reality.server_effective }}"
    eff_sni: "{{ item.reality.sni }}"
    eff_socks_port: "{{ item.reality.socks_port }}"
    eff_flow: "{{ item.reality.flow }}"
    eff_log_level: "{{ item.reality.log_level }}"
    eff_http_url: "{{ reality_e2e_defaults.http_test_url | default('https://cp.cloudflare.com/generate_204') }}"
    eff_http_timeout: "{{ reality_e2e_defaults.http_timeout | default(8) }}"
  tags: [reality_e2e]

- name: Reality E2E | Render per-node ENV file
  ansible.builtin.template:
    src: "reality_profile.env.j2"
    dest: "{{ reality_e2e_cfg_dir }}/{{ item.name }}.env"
    owner: root
    group: "{{ reality_e2e_group }}"
    mode: "0644"
  loop: "{{ reality_e2e_nodes_eff }}"
  loop_control:
    label: "{{ item.name }}"
  vars:
    eff_name: "{{ item.name }}"
    eff_socks_port: "{{ item.reality.socks_port }}"
    eff_http_url: "{{ reality_e2e_defaults.http_test_url | default('https://cp.cloudflare.com/generate_204') }}"
    eff_http_timeout: "{{ reality_e2e_defaults.http_timeout | default(8) }}"
  tags: [reality_e2e]
